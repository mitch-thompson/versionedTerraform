version: 2.1

orbs:
  go: circleci/go@1.7
  github-cli: circleci/github-cli@2.0

jobs:
  test:
    docker:
      - image: cimg/go:1.19
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Install gotestsum
          command: go install gotest.tools/gotestsum@latest
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-results
            gotestsum --junitfile /tmp/test-results/unit-tests.xml -- ./... -v
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  build:
    docker:
      - image: cimg/go:1.19
    parameters:
      os:
        type: string
      arch:
        type: string
    steps:
      - checkout
      - go/mod-download-cached

      - run:
          name: Build binary
          command: |
            mkdir -p ./dist
            export BINARY_NAME=versionedTerraform_<< parameters.os >>_<< parameters.arch >>
            
            # Set CGO_ENABLED=0 to produce statically linked binaries
            export CGO_ENABLED=0
            export GOOS=<< parameters.os >>
            export GOARCH=<< parameters.arch >>
            
            # Simple build command with essential flags only
            go build -o ./dist/$BINARY_NAME
            
            if [[ "<< parameters.os >>" == "windows" ]]; then
              mv ./dist/$BINARY_NAME ./dist/${BINARY_NAME}.exe
              BINARY_NAME=${BINARY_NAME}.exe
            fi
            
            cd ./dist
            tar -czf ${BINARY_NAME}.tar.gz $BINARY_NAME
            
            if [[ "<< parameters.os >>" == "darwin" || "<< parameters.os >>" == "linux" ]]; then
              shasum -a 256 ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256
            fi

      - run:
          name: Verify binary
          command: |
            if [[ "<< parameters.os >>" == "linux" && "<< parameters.arch >>" == "amd64" ]]; then
              echo "Verifying Linux/amd64 binary..."
              chmod +x ./dist/versionedTerraform_linux_amd64
            
              ./dist/versionedTerraform_linux_amd64 --help
            
              if [ $? -ne 0 ]; then
                echo "Binary verification failed! Aborting build."
                exit 1
              else
                echo "Binary verification successful."
              fi
            fi
            
            # List all builds to confirm they exist
            ls -la ./dist/

      - persist_to_workspace:
          root: ./dist
          paths:
            - "*"

  publish-github-release:
    docker:
      - image: cimg/go:1.19
    steps:
      - checkout
      - attach_workspace:
          at: ./dist
      - github-cli/setup:
          token: GH_TOKEN
      - run:
          name: Create GitHub Release
          command: |
            VERSION=$(cat version.md | tr -d '"')
            if [ -z "$VERSION" ]; then
              VERSION="v0.1.0-$(date +%Y%m%d%H%M%S)"
            else
              # Add v prefix if not present
              [[ "$VERSION" != v* ]] && VERSION="v$VERSION"
            fi
            
            # Create a GitHub release
            gh release create $VERSION ./dist/*.tar.gz \
              --repo $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
              --title "Release $VERSION" \
              --notes "Automated release from CircleCI build $CIRCLE_BUILD_NUM
            
              SHA256 hashes:
              $(cat ./dist/*.sha256 2>/dev/null || echo 'No SHA256 files found')
              "

  update-homebrew-formula:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./dist
      - github-cli/setup:
          token: GH_TOKEN
      - run:
          name: Update Homebrew Formula
          command: |
            VERSION=$(cat version.md | tr -d '"')
            # Add v prefix if not present
            [[ "$VERSION" != v* ]] && VERSION="v$VERSION"
            
            git clone https://github.com/mitch-thompson/homebrew-terraform.git
            cd homebrew-terraform
            
            DARWIN_ARM64_SHA=$(cat ../dist/versionedTerraform_darwin_arm64.tar.gz.sha256 2>/dev/null | awk '{print $1}' || echo "")
            DARWIN_AMD64_SHA=$(cat ../dist/versionedTerraform_darwin_amd64.tar.gz.sha256 2>/dev/null | awk '{print $1}' || echo "")
            LINUX_ARM64_SHA=$(cat ../dist/versionedTerraform_linux_arm64.tar.gz.sha256 2>/dev/null | awk '{print $1}' || echo "")
            LINUX_AMD64_SHA=$(cat ../dist/versionedTerraform_linux_amd64.tar.gz.sha256 2>/dev/null | awk '{print $1}' || echo "")

            cat > versioned-terraform.rb <<EOL
            class VersionedTerraform < Formula
              desc "Wrapper for terraform to detect, download, and execute the right version"
              homepage "https://github.com/mitch-thompson/versionedTerraform"
              version "${VERSION#v}"
            
              on_macos do
                on_arm do
                  url "https://github.com/mitch-thompson/versionedTerraform/releases/download/${VERSION}/versionedTerraform_darwin_arm64.tar.gz"
                  sha256 "${DARWIN_ARM64_SHA}"
                end
                on_intel do
                  url "https://github.com/mitch-thompson/versionedTerraform/releases/download/${VERSION}/versionedTerraform_darwin_amd64.tar.gz"
                  sha256 "${DARWIN_AMD64_SHA}"
                end
              end
            
              on_linux do
                on_arm do
                  url "https://github.com/mitch-thompson/versionedTerraform/releases/download/${VERSION}/versionedTerraform_linux_arm64.tar.gz"
                  sha256 "${LINUX_ARM64_SHA}"
                end
                on_intel do
                  url "https://github.com/mitch-thompson/versionedTerraform/releases/download/${VERSION}/versionedTerraform_linux_amd64.tar.gz"
                  sha256 "${LINUX_AMD64_SHA}"
                end
              end
            
              def install
                if OS.mac?
                  binary_name = Hardware::CPU.arm? ? "versionedTerraform_darwin_arm64" : "versionedTerraform_darwin_amd64"
                else
                  binary_name = Hardware::CPU.arm? ? "versionedTerraform_linux_arm64" : "versionedTerraform_linux_amd64"
                end
            
                bin.install binary_name => "versionedterraform"
              end
            
              test do
                system "#{bin}/versionedterraform", "--help"
              end
            end
            EOL
            
            git config user.email "ci-bot@example.com"
            git config user.name "CircleCI Bot"
            git add versioned-terraform.rb
            git commit -m "Update formula to version ${VERSION}"
            git push https://${GH_TOKEN}@github.com/mitch-thompson/homebrew-terraform.git master

workflows:
  version: 2
  test-build-and-release:
    jobs:
      - test

      - build:
          name: build-darwin-amd64
          os: darwin
          arch: amd64
          requires:
            - test
      - build:
          name: build-darwin-arm64
          os: darwin
          arch: arm64
          requires:
            - test
      - build:
          name: build-linux-amd64
          os: linux
          arch: amd64
          requires:
            - test
      - build:
          name: build-linux-arm64
          os: linux
          arch: arm64
          requires:
            - test
      - build:
          name: build-windows-amd64
          os: windows
          arch: amd64
          requires:
            - test

      - publish-github-release:
          requires:
            - build-darwin-amd64
            - build-darwin-arm64
            - build-linux-amd64
            - build-linux-arm64
            - build-windows-amd64
          filters:
            branches:
              only: master

      - update-homebrew-formula:
          requires:
            - publish-github-release
          filters:
            branches:
              only: master